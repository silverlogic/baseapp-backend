# Generated by Django 5.1.11 on 2025-09-15 14:28

import pgtrigger.compiler
import pgtrigger.migrations
from django.db import migrations


class Migration(migrations.Migration):

    dependencies = [
        ("baseapp_reports", "0006_delete_old_rename_new_report_type"),
    ]

    operations = [
        pgtrigger.migrations.AddTrigger(
            model_name="report",
            trigger=pgtrigger.compiler.Trigger(
                name="insert_public_id_mapping",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func="\n            INSERT INTO baseapp_core_publicidmapping (public_id, content_type_id, object_id, created, modified)\n            VALUES (\n                gen_random_uuid(),\n                (SELECT id FROM django_content_type WHERE app_label = 'baseapp_reports' AND model = 'report'),\n                NEW.id,\n                NOW(),\n                NOW()\n            )\n            ON CONFLICT (content_type_id, object_id) DO NOTHING;\n            RETURN NULL;\n            ",
                    hash="a6b53612cf4f6d844bc9606f3198449293c9d4c7",
                    operation="INSERT",
                    pgid="pgtrigger_insert_public_id_mapping_4d8d4",
                    table="baseapp_reports_report",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="report",
            trigger=pgtrigger.compiler.Trigger(
                name="delete_public_id_mapping",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func="\n            DELETE FROM baseapp_core_publicidmapping\n            WHERE\n                content_type_id = (SELECT id FROM django_content_type WHERE app_label = 'baseapp_reports' AND model = 'report')\n                AND object_id = OLD.id;\n            RETURN NULL;\n            ",
                    hash="398882868100f59480ebdf9c9c530e4b56656295",
                    operation="DELETE",
                    pgid="pgtrigger_delete_public_id_mapping_a2b5f",
                    table="baseapp_reports_report",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="reporttype",
            trigger=pgtrigger.compiler.Trigger(
                name="insert_public_id_mapping",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func="\n            INSERT INTO baseapp_core_publicidmapping (public_id, content_type_id, object_id, created, modified)\n            VALUES (\n                gen_random_uuid(),\n                (SELECT id FROM django_content_type WHERE app_label = 'baseapp_reports' AND model = 'reporttype'),\n                NEW.id,\n                NOW(),\n                NOW()\n            )\n            ON CONFLICT (content_type_id, object_id) DO NOTHING;\n            RETURN NULL;\n            ",
                    hash="45b84762a400299168732d4de5f21c27ac363bde",
                    operation="INSERT",
                    pgid="pgtrigger_insert_public_id_mapping_7a77a",
                    table="baseapp_reports_reporttype",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="reporttype",
            trigger=pgtrigger.compiler.Trigger(
                name="delete_public_id_mapping",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func="\n            DELETE FROM baseapp_core_publicidmapping\n            WHERE\n                content_type_id = (SELECT id FROM django_content_type WHERE app_label = 'baseapp_reports' AND model = 'reporttype')\n                AND object_id = OLD.id;\n            RETURN NULL;\n            ",
                    hash="f10abadb30620c33be148c6a3e7fc2dae2d39e56",
                    operation="DELETE",
                    pgid="pgtrigger_delete_public_id_mapping_d12b2",
                    table="baseapp_reports_reporttype",
                    when="AFTER",
                ),
            ),
        ),
    ]
