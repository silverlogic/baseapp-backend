name: Project Workflow

on:
  workflow_call:
    inputs:
      project:
        required: true
        type: string
      app_name:
        required: false
        type: string
      custom_pytest:
        required: false
        type: string

jobs:
  project-workflow:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12"]
        django-version: ["4.2.15", "5.0.8"]
    steps:
      - uses: actions/checkout@v4

      - name: docker compose build
        run: docker compose build --build-arg "PYTHON_VERSION=${{ matrix.python-version }}"

      - name: docker compose up
        run: docker compose up -d --wait

      - name: install requirements
        run: docker compose exec backend pip install -r ${{ inputs.project }}/testproject/requirements.txt

      - name: flake8
        id: flake8
        run: docker compose exec backend flake8 ./${{ inputs.project }} --show-source --statistics --count

      - name: isort
        id: isort
        if: steps.flake8.outcome == 'success'
        run: docker compose exec backend isort --check ./${{ inputs.project }}

      - name: black
        id: black
        if: steps.isort.outcome == 'success'
        run: docker compose exec backend black --check ./${{ inputs.project }}

      - name: Install tests requirements with Django ${{ matrix.django-version }}
        if: steps.black.outcome == 'success'
        id: requirements_installation
        run: |
          docker compose exec backend pip install -r ${{ inputs.project }}/testproject/requirements.txt
          # Override Django version
          docker compose exec backend pip install "Django~=${{ matrix.django-version }}"

      - name: pytest
        if: steps.requirements_installation.outcome == 'success'
        run: |
          app_name=$(echo "${{ inputs.project }}" | tr '-' '_')
          if [ "${{ inputs.app_name }}" ]
            then app_name="${{ inputs.app_name }}"
          else 
            app_name=$(echo "${{ inputs.project }}" | tr '-' '_')
          fi
          tests_path="${{ inputs.project }}/${app_name}/tests"
          docker compose exec backend pytest ${tests_path}
          echo "Running custom pytest command"
          if [ "${{ inputs.custom_pytest }}" ]
            then eval "docker compose exec backend ${{ inputs.custom_pytest }}"
          fi

      - name: docker compose down
        run: docker compose down --volumes --remove-orphans
