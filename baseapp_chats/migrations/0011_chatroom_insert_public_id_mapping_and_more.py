# Generated by Django 5.1.11 on 2025-09-15 14:28

import pgtrigger.compiler
import pgtrigger.migrations
from django.db import migrations


class Migration(migrations.Migration):

    dependencies = [
        ("baseapp_chats", "0010_message_deleted"),
        ("baseapp_core", "0001_initial"),
    ]

    operations = [
        pgtrigger.migrations.AddTrigger(
            model_name="chatroom",
            trigger=pgtrigger.compiler.Trigger(
                name="insert_public_id_mapping",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func="\n            INSERT INTO baseapp_core_publicidmapping (public_id, content_type_id, object_id, created, modified)\n            VALUES (\n                gen_random_uuid(),\n                (SELECT id FROM django_content_type WHERE app_label = 'baseapp_chats' AND model = 'chatroom'),\n                NEW.id,\n                NOW(),\n                NOW()\n            )\n            ON CONFLICT (content_type_id, object_id) DO NOTHING;\n            RETURN NULL;\n            ",
                    hash="32423c28484e0886e7c379e858af47fa13124406",
                    operation="INSERT",
                    pgid="pgtrigger_insert_public_id_mapping_699a3",
                    table="baseapp_chats_chatroom",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="chatroom",
            trigger=pgtrigger.compiler.Trigger(
                name="delete_public_id_mapping",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func="\n            DELETE FROM baseapp_core_publicidmapping\n            WHERE\n                content_type_id = (SELECT id FROM django_content_type WHERE app_label = 'baseapp_chats' AND model = 'chatroom')\n                AND object_id = OLD.id;\n            RETURN NULL;\n            ",
                    hash="e26ea2fc30298b7b709e89092e096bda4297c23f",
                    operation="DELETE",
                    pgid="pgtrigger_delete_public_id_mapping_55bc4",
                    table="baseapp_chats_chatroom",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="chatroomparticipant",
            trigger=pgtrigger.compiler.Trigger(
                name="insert_public_id_mapping",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func="\n            INSERT INTO baseapp_core_publicidmapping (public_id, content_type_id, object_id, created, modified)\n            VALUES (\n                gen_random_uuid(),\n                (SELECT id FROM django_content_type WHERE app_label = 'baseapp_chats' AND model = 'chatroomparticipant'),\n                NEW.id,\n                NOW(),\n                NOW()\n            )\n            ON CONFLICT (content_type_id, object_id) DO NOTHING;\n            RETURN NULL;\n            ",
                    hash="70d91507b79974f7b39c044aeb4461b4dcd1fb72",
                    operation="INSERT",
                    pgid="pgtrigger_insert_public_id_mapping_8af80",
                    table="baseapp_chats_chatroomparticipant",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="chatroomparticipant",
            trigger=pgtrigger.compiler.Trigger(
                name="delete_public_id_mapping",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func="\n            DELETE FROM baseapp_core_publicidmapping\n            WHERE\n                content_type_id = (SELECT id FROM django_content_type WHERE app_label = 'baseapp_chats' AND model = 'chatroomparticipant')\n                AND object_id = OLD.id;\n            RETURN NULL;\n            ",
                    hash="7a2e21728232c5a9a5329b6a9a7bf587d8f62492",
                    operation="DELETE",
                    pgid="pgtrigger_delete_public_id_mapping_9115c",
                    table="baseapp_chats_chatroomparticipant",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="message",
            trigger=pgtrigger.compiler.Trigger(
                name="insert_public_id_mapping",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func="\n            INSERT INTO baseapp_core_publicidmapping (public_id, content_type_id, object_id, created, modified)\n            VALUES (\n                gen_random_uuid(),\n                (SELECT id FROM django_content_type WHERE app_label = 'baseapp_chats' AND model = 'message'),\n                NEW.id,\n                NOW(),\n                NOW()\n            )\n            ON CONFLICT (content_type_id, object_id) DO NOTHING;\n            RETURN NULL;\n            ",
                    hash="7dd40facaa516184f57494f96c01ab042dc7e434",
                    operation="INSERT",
                    pgid="pgtrigger_insert_public_id_mapping_cc855",
                    table="baseapp_chats_message",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="message",
            trigger=pgtrigger.compiler.Trigger(
                name="delete_public_id_mapping",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func="\n            DELETE FROM baseapp_core_publicidmapping\n            WHERE\n                content_type_id = (SELECT id FROM django_content_type WHERE app_label = 'baseapp_chats' AND model = 'message')\n                AND object_id = OLD.id;\n            RETURN NULL;\n            ",
                    hash="6aaa19a949462493cd684755c15a38721f502aac",
                    operation="DELETE",
                    pgid="pgtrigger_delete_public_id_mapping_13d45",
                    table="baseapp_chats_message",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="messagestatus",
            trigger=pgtrigger.compiler.Trigger(
                name="insert_public_id_mapping",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func="\n            INSERT INTO baseapp_core_publicidmapping (public_id, content_type_id, object_id, created, modified)\n            VALUES (\n                gen_random_uuid(),\n                (SELECT id FROM django_content_type WHERE app_label = 'baseapp_chats' AND model = 'messagestatus'),\n                NEW.id,\n                NOW(),\n                NOW()\n            )\n            ON CONFLICT (content_type_id, object_id) DO NOTHING;\n            RETURN NULL;\n            ",
                    hash="ae0ff88b15ec7fa1a07e78f13f808089e83b8762",
                    operation="INSERT",
                    pgid="pgtrigger_insert_public_id_mapping_96c66",
                    table="baseapp_chats_messagestatus",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="messagestatus",
            trigger=pgtrigger.compiler.Trigger(
                name="delete_public_id_mapping",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func="\n            DELETE FROM baseapp_core_publicidmapping\n            WHERE\n                content_type_id = (SELECT id FROM django_content_type WHERE app_label = 'baseapp_chats' AND model = 'messagestatus')\n                AND object_id = OLD.id;\n            RETURN NULL;\n            ",
                    hash="478267f148fb24f62dae04b0320a891e56cfeda1",
                    operation="DELETE",
                    pgid="pgtrigger_delete_public_id_mapping_38b03",
                    table="baseapp_chats_messagestatus",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="unreadmessagecount",
            trigger=pgtrigger.compiler.Trigger(
                name="insert_public_id_mapping",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func="\n            INSERT INTO baseapp_core_publicidmapping (public_id, content_type_id, object_id, created, modified)\n            VALUES (\n                gen_random_uuid(),\n                (SELECT id FROM django_content_type WHERE app_label = 'baseapp_chats' AND model = 'unreadmessagecount'),\n                NEW.id,\n                NOW(),\n                NOW()\n            )\n            ON CONFLICT (content_type_id, object_id) DO NOTHING;\n            RETURN NULL;\n            ",
                    hash="5c065643a1e1dca6aaf388b532f91377dcedc581",
                    operation="INSERT",
                    pgid="pgtrigger_insert_public_id_mapping_c8b18",
                    table="baseapp_chats_unreadmessagecount",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="unreadmessagecount",
            trigger=pgtrigger.compiler.Trigger(
                name="delete_public_id_mapping",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func="\n            DELETE FROM baseapp_core_publicidmapping\n            WHERE\n                content_type_id = (SELECT id FROM django_content_type WHERE app_label = 'baseapp_chats' AND model = 'unreadmessagecount')\n                AND object_id = OLD.id;\n            RETURN NULL;\n            ",
                    hash="3ad75868570c3f4ac56720041a4ed3ec7f9360d8",
                    operation="DELETE",
                    pgid="pgtrigger_delete_public_id_mapping_20437",
                    table="baseapp_chats_unreadmessagecount",
                    when="AFTER",
                ),
            ),
        ),
    ]
