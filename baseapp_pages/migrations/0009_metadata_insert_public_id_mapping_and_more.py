# Generated by Django 5.1.11 on 2025-09-15 14:28

import pgtrigger.compiler
import pgtrigger.migrations
from django.db import migrations


class Migration(migrations.Migration):

    dependencies = [
        ("baseapp_pages", "0008_remove_pageevent_pgh_context_and_more"),
        ("baseapp_core", "0001_initial"),
    ]

    operations = [
        pgtrigger.migrations.AddTrigger(
            model_name="metadata",
            trigger=pgtrigger.compiler.Trigger(
                name="insert_public_id_mapping",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func="\n            INSERT INTO baseapp_core_publicidmapping (public_id, content_type_id, object_id, created, modified)\n            VALUES (\n                gen_random_uuid(),\n                (SELECT id FROM django_content_type WHERE app_label = 'baseapp_pages' AND model = 'metadata'),\n                NEW.id,\n                NOW(),\n                NOW()\n            )\n            ON CONFLICT (content_type_id, object_id) DO NOTHING;\n            RETURN NULL;\n            ",
                    hash="f87f7fbda4675da3530112fa281d05b661bb3c45",
                    operation="INSERT",
                    pgid="pgtrigger_insert_public_id_mapping_d2149",
                    table="baseapp_pages_metadata",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="metadata",
            trigger=pgtrigger.compiler.Trigger(
                name="delete_public_id_mapping",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func="\n            DELETE FROM baseapp_core_publicidmapping\n            WHERE\n                content_type_id = (SELECT id FROM django_content_type WHERE app_label = 'baseapp_pages' AND model = 'metadata')\n                AND object_id = OLD.id;\n            RETURN NULL;\n            ",
                    hash="f813aa9425455b8f5b6baa933f8e8093d1d93d3e",
                    operation="DELETE",
                    pgid="pgtrigger_delete_public_id_mapping_6513f",
                    table="baseapp_pages_metadata",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="page",
            trigger=pgtrigger.compiler.Trigger(
                name="insert_public_id_mapping",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func="\n            INSERT INTO baseapp_core_publicidmapping (public_id, content_type_id, object_id, created, modified)\n            VALUES (\n                gen_random_uuid(),\n                (SELECT id FROM django_content_type WHERE app_label = 'baseapp_pages' AND model = 'page'),\n                NEW.id,\n                NOW(),\n                NOW()\n            )\n            ON CONFLICT (content_type_id, object_id) DO NOTHING;\n            RETURN NULL;\n            ",
                    hash="1e63e86bd170ae8c80da5540e721b877ade6ea2f",
                    operation="INSERT",
                    pgid="pgtrigger_insert_public_id_mapping_6fb96",
                    table="baseapp_pages_page",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="page",
            trigger=pgtrigger.compiler.Trigger(
                name="delete_public_id_mapping",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func="\n            DELETE FROM baseapp_core_publicidmapping\n            WHERE\n                content_type_id = (SELECT id FROM django_content_type WHERE app_label = 'baseapp_pages' AND model = 'page')\n                AND object_id = OLD.id;\n            RETURN NULL;\n            ",
                    hash="58debed89bbfda706dcec68a10b6d3c90c1819ed",
                    operation="DELETE",
                    pgid="pgtrigger_delete_public_id_mapping_cd863",
                    table="baseapp_pages_page",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="urlpath",
            trigger=pgtrigger.compiler.Trigger(
                name="insert_public_id_mapping",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func="\n            INSERT INTO baseapp_core_publicidmapping (public_id, content_type_id, object_id, created, modified)\n            VALUES (\n                gen_random_uuid(),\n                (SELECT id FROM django_content_type WHERE app_label = 'baseapp_pages' AND model = 'urlpath'),\n                NEW.id,\n                NOW(),\n                NOW()\n            )\n            ON CONFLICT (content_type_id, object_id) DO NOTHING;\n            RETURN NULL;\n            ",
                    hash="2a2938ace536721875442e1c97068913258ef025",
                    operation="INSERT",
                    pgid="pgtrigger_insert_public_id_mapping_1c0e9",
                    table="baseapp_pages_urlpath",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="urlpath",
            trigger=pgtrigger.compiler.Trigger(
                name="delete_public_id_mapping",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func="\n            DELETE FROM baseapp_core_publicidmapping\n            WHERE\n                content_type_id = (SELECT id FROM django_content_type WHERE app_label = 'baseapp_pages' AND model = 'urlpath')\n                AND object_id = OLD.id;\n            RETURN NULL;\n            ",
                    hash="b76b627577c8609917f879ef47ceb1e50e926092",
                    operation="DELETE",
                    pgid="pgtrigger_delete_public_id_mapping_cb240",
                    table="baseapp_pages_urlpath",
                    when="AFTER",
                ),
            ),
        ),
    ]
