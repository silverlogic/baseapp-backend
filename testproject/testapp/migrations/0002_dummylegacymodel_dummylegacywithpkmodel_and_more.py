# Generated by Django 5.1.11 on 2025-09-17 19:12

import pgtrigger.compiler
import pgtrigger.migrations
from django.db import migrations, models

import baseapp_core.hashids.models


class Migration(migrations.Migration):

    dependencies = [
        ("testapp", "0001_initial"),
        ("baseapp_core", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="DummyLegacyModel",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("name", models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name="DummyLegacyWithPkModel",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("name", models.CharField(max_length=100)),
            ],
            bases=(baseapp_core.hashids.models.LegacyWithPkMixin, models.Model),
        ),
        migrations.CreateModel(
            name="DummyPublicIdModel",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("name", models.CharField(max_length=100)),
            ],
            bases=(baseapp_core.hashids.models.PublicIdMixin, models.Model),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="dummypublicidmodel",
            trigger=pgtrigger.compiler.Trigger(
                name="insert_public_id_mapping",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func="\n            INSERT INTO baseapp_core_publicidmapping (public_id, content_type_id, object_id, created, modified)\n            VALUES (\n                gen_random_uuid(),\n                (SELECT id FROM django_content_type WHERE app_label = 'testapp' AND model = 'dummypublicidmodel'),\n                NEW.id,\n                NOW(),\n                NOW()\n            )\n            ON CONFLICT (content_type_id, object_id) DO NOTHING;\n            RETURN NULL;\n            ",
                    hash="1ff96277dde5a9a9a68f5e069eea8471b6b525f1",
                    operation="INSERT",
                    pgid="pgtrigger_insert_public_id_mapping_7cb30",
                    table="testapp_dummypublicidmodel",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="dummypublicidmodel",
            trigger=pgtrigger.compiler.Trigger(
                name="delete_public_id_mapping",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func="\n            DELETE FROM baseapp_core_publicidmapping\n            WHERE\n                content_type_id = (SELECT id FROM django_content_type WHERE app_label = 'testapp' AND model = 'dummypublicidmodel')\n                AND object_id = OLD.id;\n            RETURN NULL;\n            ",
                    hash="75905f7c625c090c17dea3a5b89449f1fe72a8e2",
                    operation="DELETE",
                    pgid="pgtrigger_delete_public_id_mapping_162ee",
                    table="testapp_dummypublicidmodel",
                    when="AFTER",
                ),
            ),
        ),
    ]
